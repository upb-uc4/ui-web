import CourseAdmission from "@/api/api_models/admission_management/CourseAdmission";
import SubjectMatriculation from "@/api/api_models/matriculation_management/SubjectMatriculation";
import { decodeTransaction } from "@/api/helpers/TransactionDecoding";
import {
    admissionsTransactionValidator,
    matriculationTransactionValidator,
    rejectionTransactionValidator,
} from "@/api/helpers/TransactionValidator";

describe("Transaction Validation Tests", () => {
    const protoURL = "public/hlf-proto.json";

    test("Test Matriculation Transaction Validation", async () => {
        const transactionB64 =
            "CpAKCmsIAxABGgwIltPI/gUQwNDX1QMiCW15Y2hhbm5lbCpAOTQwNmI5MjExZmFmMDkyODIxNTZkNDljZmY3MDlhZjZkN2ZjZWUxN2I0ZDIzNmZjN2Q0MTM4ODNiNWQ3OTA3OToKEggSBnVjNC1jYxKgCQqDCQoHb3JnMU1TUBL3CC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlESURDQ0FzZWdBd0lCQWdJVUo2b2tlckpmWG1NQmNKaXBFOUZpK2tPNk5Xd3dDZ1lJS29aSXpqMEVBd0l3ClhERUxNQWtHQTFVRUJoTUNSRVV4RERBS0JnTlZCQWdNQTA1U1Z6RVNNQkFHQTFVRUJ3d0pVR0ZrWlhKaWIzSnUKTVF3d0NnWURWUVFLREFOVlF6UXhEREFLQmdOVkJBc01BMVZETkRFUE1BMEdBMVVFQXd3R2RHeHpMV05oTUI0WApEVEl3TVRJeE1ERXpNell3TUZvWERUSXhNVEl4TURFek5ERXdNRm93WERFUE1BMEdBMVVFQ3hNR1kyeHBaVzUwCk1Va3dSd1lEVlFRREUwQTNZbVl6Wm1aa1pEUTBPVEZtWlRBM056Z3lNVGt4T1dKa09EUmhNV1l4T1RCaVlqZ3cKTWpoaE5HSmlZamt6Tm1ZMU1tWXhOR1ZrWmpBNU9UYzVOemczTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowRApBUWNEUWdBRUdmRFdONUZIKzFYQmFEMTFBMUlHK0JmdmY4dWtGN2s1RUdqdTlPRklPenVFMEJ2eHh5U1g2SFdZCkp1bW5NNkVTVU5FOFJBWWRQYlhTUi9CR3FHRHRhcU9DQVdVd2dnRmhNQTRHQTFVZER3RUIvd1FFQXdJRHFEQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFkQmdOVgpIUTRFRmdRVXpGYkRRdVpJc1F1NXVBNVZpaWpCQkdkdHFDTXdId1lEVlIwakJCZ3dGb0FVSUZzenNUSm1WY2lwCnpXR1MydkNubG1HOVhMc3dTd1lEVlIwUkJFUXdRb0pBTjJKbU0yWm1aR1EwTkRreFptVXdOemM0TWpFNU1UbGkKWkRnMFlURm1NVGt3WW1JNE1ESTRZVFJpWW1JNU16Wm1OVEptTVRSbFpHWXdPVGszT1RjNE56Q0JsQVlJS2dNRQpCUVlIQ0FFRWdZZDdJbUYwZEhKeklqcDdJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhzCmJXVnVkRWxFSWpvaU4ySm1NMlptWkdRME5Ea3habVV3TnpjNE1qRTVNVGxpWkRnMFlURm1NVGt3WW1JNE1ESTQKWVRSaVltSTVNelptTlRKbU1UUmxaR1l3T1RrM09UYzROeUlzSW1obUxsUjVjR1VpT2lKamJHbGxiblFpZlgwdwpDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdXMXlCaXp1K3gvblpKV2srMldUeTlrUXYvVVl2VmZpZW1GaVI4UCtmClZ0OENJR29YYmFkV3Jhb3BOQ2x4TGovckZNRFFLM29jQ0h3a2FGczRnYUtKMEZyaAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIYR5PGXcEdG7SRentI+R8sVXnE9pJJGM18ErA0Cq00CqAJCoMJCgdvcmcxTVNQEvcILS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQXNlZ0F3SUJBZ0lVSjZva2VySmZYbU1CY0ppcEU5Rmkra082Tld3d0NnWUlLb1pJemowRUF3SXcKWERFTE1Ba0dBMVVFQmhNQ1JFVXhEREFLQmdOVkJBZ01BMDVTVnpFU01CQUdBMVVFQnd3SlVHRmtaWEppYjNKdQpNUXd3Q2dZRFZRUUtEQU5WUXpReEREQUtCZ05WQkFzTUExVkROREVQTUEwR0ExVUVBd3dHZEd4ekxXTmhNQjRYCkRUSXdNVEl4TURFek16WXdNRm9YRFRJeE1USXhNREV6TkRFd01Gb3dYREVQTUEwR0ExVUVDeE1HWTJ4cFpXNTAKTVVrd1J3WURWUVFERTBBM1ltWXpabVprWkRRME9URm1aVEEzTnpneU1Ua3hPV0prT0RSaE1XWXhPVEJpWWpndwpNamhoTkdKaVlqa3pObVkxTW1ZeE5HVmtaakE1T1RjNU56ZzNNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBECkFRY0RRZ0FFR2ZEV041RkgrMVhCYUQxMUExSUcrQmZ2Zjh1a0Y3azVFR2p1OU9GSU96dUUwQnZ4eHlTWDZIV1kKSnVtbk02RVNVTkU4UkFZZFBiWFNSL0JHcUdEdGFxT0NBV1V3Z2dGaE1BNEdBMVVkRHdFQi93UUVBd0lEcURBZApCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WCkhRNEVGZ1FVekZiRFF1WklzUXU1dUE1VmlpakJCR2R0cUNNd0h3WURWUjBqQkJnd0ZvQVVJRnN6c1RKbVZjaXAKeldHUzJ2Q25sbUc5WExzd1N3WURWUjBSQkVRd1FvSkFOMkptTTJabVpHUTBORGt4Wm1Vd056YzRNakU1TVRsaQpaRGcwWVRGbU1Ua3dZbUk0TURJNFlUUmlZbUk1TXpabU5USm1NVFJsWkdZd09UazNPVGM0TnpDQmxBWUlLZ01FCkJRWUhDQUVFZ1lkN0ltRjBkSEp6SWpwN0ltaG1Ma0ZtWm1sc2FXRjBhVzl1SWpvaUlpd2lhR1l1Ulc1eWIyeHMKYldWdWRFbEVJam9pTjJKbU0yWm1aR1EwTkRreFptVXdOemM0TWpFNU1UbGlaRGcwWVRGbU1Ua3dZbUk0TURJNApZVFJpWW1JNU16Wm1OVEptTVRSbFpHWXdPVGszT1RjNE55SXNJbWhtTGxSNWNHVWlPaUpqYkdsbGJuUWlmWDB3CkNnWUlLb1pJemowRUF3SURSd0F3UkFJZ1cxeUJpenUreC9uWkpXaysyV1R5OWtRdi9VWXZWZmllbUZpUjhQK2YKVnQ4Q0lHb1hiYWRXcmFvcE5DbHhMai9yRk1EUUszb2NDSHdrYUZzNGdhS0owRnJoCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEhhHk8ZdwR0btJF6e0j5HyxVecT2kkkYzXwShysKhgIKgwIKgAIIARIIEgZ1YzQtY2Ma8QEKH1VDNC5BcHByb3ZhbDphcHByb3ZlVHJhbnNhY3Rpb24KFVVDNC5NYXRyaWN1bGF0aW9uRGF0YQodYWRkRW50cmllc1RvTWF0cmljdWxhdGlvbkRhdGEKlwFbIjdiZjNmZmRkNDQ5MWZlMDc3ODIxOTE5YmQ4NGExZjE5MGJiODAyOGE0YmJiOTM2ZjUyZjE0ZWRmMDk5Nzk3ODciLCJbe1wiZmllbGRPZlN0dWR5XCI6XCJCYWNoZWxvciBDb21wdXRlciBTY2llbmNlIHYzXCIsXCJzZW1lc3RlcnNcIjpbXCJTUzIwMTlcIl19XSJdEvsoCswHCiB/m+m7P9n2dgvGZk19ob6OClp6gj6plaweGSpI5wGy7hKnBwqnBBI3CgpfbGlmZWN5Y2xlEikKJwohbmFtZXNwYWNlcy9maWVsZHMvdWM0LWNjL1NlcXVlbmNlEgIIAxLrAwoGdWM0LWNjEuADCjwKNQBkcmFmdDoAV1pNbzM2NEhPQ29DSlFlTDFEWmsvOUhYTU9RNzRkbWtpSE0vZGgzQjBrMD0AEgMI/QEanwMKNQBkcmFmdDoAV1pNbzM2NEhPQ29DSlFlTDFEWmsvOUhYTU9RNzRkbWtpSE0vZGgzQjBrMD0AGuUCW3siaWQiOiJ4NTA5OjpDTlx1MDAzZHNjYWxhLWFkbWluLW9yZzEsIE9VXHUwMDNkYWRtaW46OkNOXHUwMDNkdGxzLWNhLCBPVVx1MDAzZFVDNCwgT1x1MDAzZFVDNCwgTFx1MDAzZFBhZGVyYm9ybiwgU1RcdTAwM2ROUlcsIENcdTAwM2RERSIsInR5cGUiOiJhZG1pbiJ9LHsiaWQiOiJ4NTA5OjpDTlx1MDAzZDdiZjNmZmRkNDQ5MWZlMDc3ODIxOTE5YmQ4NGExZjE5MGJiODAyOGE0YmJiOTM2ZjUyZjE0ZWRmMDk5Nzk3ODcsIE9VXHUwMDNkY2xpZW50OjpDTlx1MDAzZHRscy1jYSwgT1VcdTAwM2RVQzQsIE9cdTAwM2RVQzQsIExcdTAwM2RQYWRlcmJvcm4sIFNUXHUwMDNkTlJXLCBDXHUwMDNkREUiLCJ0eXBlIjoiY2xpZW50In1dGusCCMgBGuUCW3siaWQiOiJ4NTA5OjpDTlx1MDAzZHNjYWxhLWFkbWluLW9yZzEsIE9VXHUwMDNkYWRtaW46OkNOXHUwMDNkdGxzLWNhLCBPVVx1MDAzZFVDNCwgT1x1MDAzZFVDNCwgTFx1MDAzZFBhZGVyYm9ybiwgU1RcdTAwM2ROUlcsIENcdTAwM2RERSIsInR5cGUiOiJhZG1pbiJ9LHsiaWQiOiJ4NTA5OjpDTlx1MDAzZDdiZjNmZmRkNDQ5MWZlMDc3ODIxOTE5YmQ4NGExZjE5MGJiODAyOGE0YmJiOTM2ZjUyZjE0ZWRmMDk5Nzk3ODcsIE9VXHUwMDNkY2xpZW50OjpDTlx1MDAzZHRscy1jYSwgT1VcdTAwM2RVQzQsIE9cdTAwM2RVQzQsIExcdTAwM2RQYWRlcmJvcm4sIFNUXHUwMDNkTlJXLCBDXHUwMDNkREUiLCJ0eXBlIjoiY2xpZW50In1dIg0SBnVjNC1jYxoDMS4wEqgICt0HCgdvcmcyTVNQEtEHLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwRENDQWt1Z0F3SUJBZ0lVUUJCOWhKYkcveWtCdy9icVlNWDZtZzF5ZHZjd0NnWUlLb1pJemowRUF3SXcKWERFTE1Ba0dBMVVFQmhNQ1JFVXhEREFLQmdOVkJBZ01BMDVTVnpFU01CQUdBMVVFQnd3SlVHRmtaWEppYjNKdQpNUXd3Q2dZRFZRUUtEQU5WUXpReEREQUtCZ05WQkFzTUExVkROREVQTUEwR0ExVUVBd3dHZEd4ekxXTmhNQjRYCkRUSXdNVEl3TkRFeU5USXdNRm9YRFRJeE1USXdOREV5TlRjd01Gb3dZREVMTUFrR0ExVUVCaE1DVlZNeEZ6QVYKQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRS0V3dEllWEJsY214bFpHZGxjakVOTUFzRwpBMVVFQ3hNRWNHVmxjakVUTUJFR0ExVUVBeE1LY0dWbGNqSXRiM0puTWpCWk1CTUdCeXFHU000OUFnRUdDQ3FHClNNNDlBd0VIQTBJQUJNQW1yYkF1dWJVS2FFbnhjQWdHZk9ObmVlUjlRRXVhTE8ydFRhTWQ1dlV5dGdlZDlETnoKYjZEZVlUb1NCd3R2cFRXOUlhKzFNSVhSMldGbnVFT05nOG1qZ2VZd2dlTXdEZ1lEVlIwUEFRSC9CQVFEQWdlQQpNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZLOUVOSUpCNE53K3Q4SHN1Q21ETnE1T3IzQy9NQjhHCkExVWRJd1FZTUJhQUZONWRLMkQzU3FBYXpDMDNYMDRSYmJ2SXovTmVNQ1lHQTFVZEVRUWZNQjJDRzNCbFpYSXkKTFc5eVp6SXRObUkxT0RrMlpEUm1PUzF3WjIxb1l6QmJCZ2dxQXdRRkJnY0lBUVJQZXlKaGRIUnljeUk2ZXlKbwpaaTVCWm1acGJHbGhkR2x2YmlJNklpSXNJbWhtTGtWdWNtOXNiRzFsYm5SSlJDSTZJbkJsWlhJeUxXOXlaeklpCkxDSm9aaTVVZVhCbElqb2ljR1ZsY2lKOWZUQUtCZ2dxaGtqT1BRUURBZ05IQURCRUFpQlJFMmU4L1IvbitpWG8KZkpqL1R1eFprdEUxejFoUktxUk8wT2VFdFhIKzJRSWdRTWJXdFJzT2FtNUNTVHlBMnBwaERJRXpEY0lqNFgybgpYQlZLVk9KSzQzST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSRjBEAiA+UwiswqpALt2X7KHN9wtLVcVJUx9yl0d5rNv1oyvjfwIgXex13p3KH0madH0QE3/FK+RVwkPUBhMVwf6yfnAWuiISqAgK3QcKB29yZzFNU1AS0QctLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ3BUQ0NBa3VnQXdJQkFnSVVHQmpnck95bzBJcG5yR2Q0dXJ4WjYybjd4Und3Q2dZSUtvWkl6ajBFQXdJdwpYREVMTUFrR0ExVUVCaE1DUkVVeEREQUtCZ05WQkFnTUEwNVNWekVTTUJBR0ExVUVCd3dKVUdGa1pYSmliM0p1Ck1Rd3dDZ1lEVlFRS0RBTlZRelF4RERBS0JnTlZCQXNNQTFWRE5ERVBNQTBHQTFVRUF3d0dkR3h6TFdOaE1CNFgKRFRJd01USXdOREV5TlRJd01Gb1hEVEl4TVRJd05ERXlOVGN3TUZvd1lERUxNQWtHQTFVRUJoTUNWVk14RnpBVgpCZ05WQkFnVERrNXZjblJvSUVOaGNtOXNhVzVoTVJRd0VnWURWUVFLRXd0SWVYQmxjbXhsWkdkbGNqRU5NQXNHCkExVUVDeE1FY0dWbGNqRVRNQkVHQTFVRUF4TUtjR1ZsY2pFdGIzSm5NVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUcKU000OUF3RUhBMElBQklWQmthcTNSRmJ4N0o2REs0N1RjbHJYWmlmQXJIQURGdndyRExVbnhqeHhGSWlaM2F4QwpxVnU4N0twbk4zTUpzYzRhL2Z2SktudUMwM0ZMelFISTEyNmpnZVl3Z2VNd0RnWURWUjBQQVFIL0JBUURBZ2VBCk1Bd0dBMVVkRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRk1zQ3N3dTJCUFBONFFNNnFBMEJXWHA3SCt0Rk1COEcKQTFVZEl3UVlNQmFBRkNCYk03RXlabFhJcWMxaGt0cndwNVpodlZ5N01DWUdBMVVkRVFRZk1CMkNHM0JsWlhJeApMVzl5WnpFdE4ySTFZelUxT1RRMU9TMXdNamRvZURCYkJnZ3FBd1FGQmdjSUFRUlBleUpoZEhSeWN5STZleUpvClppNUJabVpwYkdsaGRHbHZiaUk2SWlJc0ltaG1Ma1Z1Y205c2JHMWxiblJKUkNJNkluQmxaWEl4TFc5eVp6RWkKTENKb1ppNVVlWEJsSWpvaWNHVmxjaUo5ZlRBS0JnZ3Foa2pPUFFRREFnTklBREJGQWlFQTFYbjg5ZnMyQUVsdQpaSmpDSGd4QWRmZExpb2t6RlhPeE5YeXVHaENLQ2hzQ0lGa2poRi90VXMrV1VkVkkxNE9hMWhHRHhKVW5TOVJsCnlSOHhzRG1OYUMreAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChJGMEQCIBzowkoll4lmGHhFhNXYlcwq7tuFxY2eku/sznySkYl0AiBQyzqPmM5tG/o7pXaj/hQah9pFYqoxKl9JTMXbTMo6ixKoCArdBwoHb3JnMU1TUBLRBy0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDcFRDQ0FrdWdBd0lCQWdJVVFEVzcrN3FWOU1ST0xaQU1HT1AvbElIU3J4TXdDZ1lJS29aSXpqMEVBd0l3ClhERUxNQWtHQTFVRUJoTUNSRVV4RERBS0JnTlZCQWdNQTA1U1Z6RVNNQkFHQTFVRUJ3d0pVR0ZrWlhKaWIzSnUKTVF3d0NnWURWUVFLREFOVlF6UXhEREFLQmdOVkJBc01BMVZETkRFUE1BMEdBMVVFQXd3R2RHeHpMV05oTUI0WApEVEl3TVRJd05ERXlOVEl3TUZvWERUSXhNVEl3TkRFeU5UY3dNRm93WURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWCkJnTlZCQWdURGs1dmNuUm9JRU5oY205c2FXNWhNUlF3RWdZRFZRUUtFd3RJZVhCbGNteGxaR2RsY2pFTk1Bc0cKQTFVRUN4TUVjR1ZsY2pFVE1CRUdBMVVFQXhNS2NHVmxjakl0YjNKbk1UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxRwpTTTQ5QXdFSEEwSUFCT2NkZkpkb0M4R3BRSzJOVS9XOFlSK084cm41R292bUVySXZpUW41NUxQZzF1WVEvMXdMClRLai9LTVZMY1JYc1RPVGQ1UVJmRnU0MVBnQ3ArTzBNazZlamdlWXdnZU13RGdZRFZSMFBBUUgvQkFRREFnZUEKTUF3R0ExVWRFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGTEFLT0tSY2UrbG9GbVJOaTBZckxHNEtqTEJtTUI4RwpBMVVkSXdRWU1CYUFGQ0JiTTdFeVpsWElxYzFoa3Ryd3A1Wmh2Vnk3TUNZR0ExVWRFUVFmTUIyQ0czQmxaWEl5CkxXOXlaekV0TldKalpqazNObVEzTmkxNGVHSXlNakJiQmdncUF3UUZCZ2NJQVFSUGV5SmhkSFJ5Y3lJNmV5Sm8KWmk1QlptWnBiR2xoZEdsdmJpSTZJaUlzSW1obUxrVnVjbTlzYkcxbGJuUkpSQ0k2SW5CbFpYSXlMVzl5WnpFaQpMQ0pvWmk1VWVYQmxJam9pY0dWbGNpSjlmVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBN0lhTy9ESUIybW5uCktsamViS25NK09zNVJPMENYc3RyT0R3VlBtRjEzeFFDSUVqZ2k4dXRoaTFxUTBMbk05WXJFOXdaZS91SlJxVHIKVnROOXhKQzNucjNQCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEkYwRAIgK7yOwn/1aPYpt96NeKDO1EZScXXdkfhKpg6Z8x8DHqICIEVfogfwIxSnH78EL9lrsBjCoM+v83UEQEVHNVJSAPNhEqgICt0HCgdvcmcyTVNQEtEHLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwRENDQWt1Z0F3SUJBZ0lVQzdUMkp5MDBCSDhyOU04RmhoR0t3aVVOb0d3d0NnWUlLb1pJemowRUF3SXcKWERFTE1Ba0dBMVVFQmhNQ1JFVXhEREFLQmdOVkJBZ01BMDVTVnpFU01CQUdBMVVFQnd3SlVHRmtaWEppYjNKdQpNUXd3Q2dZRFZRUUtEQU5WUXpReEREQUtCZ05WQkFzTUExVkROREVQTUEwR0ExVUVBd3dHZEd4ekxXTmhNQjRYCkRUSXdNVEl3TkRFeU5USXdNRm9YRFRJeE1USXdOREV5TlRjd01Gb3dZREVMTUFrR0ExVUVCaE1DVlZNeEZ6QVYKQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRS0V3dEllWEJsY214bFpHZGxjakVOTUFzRwpBMVVFQ3hNRWNHVmxjakVUTUJFR0ExVUVBeE1LY0dWbGNqRXRiM0puTWpCWk1CTUdCeXFHU000OUFnRUdDQ3FHClNNNDlBd0VIQTBJQUJFOTNlSktOaFpuQk1rNGtFUysrUENpeHdYM0s4TkkxM2lPdEdvZmloQ2puZC90Q0t6azcKVjJkOHJTSVYvRy9zZ24rb3JkTmpzdC9GQmdoVjJlaEhrYTZqZ2VZd2dlTXdEZ1lEVlIwUEFRSC9CQVFEQWdlQQpNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZGRmtBK2Q0cUoxMUhiVlFoQ1ppcjZjK21xRG5NQjhHCkExVWRJd1FZTUJhQUZONWRLMkQzU3FBYXpDMDNYMDRSYmJ2SXovTmVNQ1lHQTFVZEVRUWZNQjJDRzNCbFpYSXgKTFc5eVp6SXROV00wWkRaa1pqWmpPQzF0WjJnMmJqQmJCZ2dxQXdRRkJnY0lBUVJQZXlKaGRIUnljeUk2ZXlKbwpaaTVCWm1acGJHbGhkR2x2YmlJNklpSXNJbWhtTGtWdWNtOXNiRzFsYm5SSlJDSTZJbkJsWlhJeExXOXlaeklpCkxDSm9aaTVVZVhCbElqb2ljR1ZsY2lKOWZUQUtCZ2dxaGtqT1BRUURBZ05IQURCRUFpQitwc3pOZ05tYytaaWoKb2ZSc01oTkxVUjZVUHd4cm1VK2JpWWJOVXA4THJnSWdaNVhQWUEvUFBaRDhFcUV5YTJ1NkNLUTR6NHFLZWRmQgpyZEIyOGtLeW5SMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSRjBEAiAIAzko9vncMVJ4Og0UeBnVjm8BUi06AAGNC3v5yBqHHgIgUTiaCZDR44g41ycMtgE3KIWQkOeR22dR9LNC/TK7fBk=";

        const transaction = await decodeTransaction(transactionB64, protoURL);

        if (!transaction) fail("Could not decode matriculation transaction");

        const enrollmentId = "7bf3ffdd4491fe077821919bd84a1f190bb8028a4bbb936f52f14edf09979787";
        const matriculation: SubjectMatriculation[] = [
            {
                fieldOfStudy: "Bachelor Computer Science v3",
                semesters: ["SS2019"],
            },
        ];

        expect(matriculationTransactionValidator(enrollmentId, matriculation, transaction)).toBe(true);

        matriculation.push({ fieldOfStudy: "Some Studies", semesters: ["Some Semester"] });

        expect(matriculationTransactionValidator(enrollmentId, matriculation, transaction)).toBe(false);

        matriculation.splice(matriculation.length - 1, 1);

        expect(matriculationTransactionValidator(enrollmentId, matriculation, transaction)).toBe(true);

        transaction.data.actions.push(transaction.data.actions[0]);

        expect(matriculationTransactionValidator(enrollmentId, matriculation, transaction)).toBe(false);

        // TODO add invalid peer signature in the future, when we can actually verify it
    });

    test("Test Course Admission Transaction Validation", async () => {
        const transactionB64 =
            "CrcJCmsIAxABGgwIgdPj/gUQgKzPvAIiCW15Y2hhbm5lbCpAYjU2YzFkNGYzZTJlZTI3NzFmNDU3YjdmZjM5MTA3NThmZWJhYTEzZGMxZjk1YWE0Y2VjNDQ1Yjk4ZTVmNzZlODoKEggSBnVjNC1jYxLHCAqqCAoHb3JnMU1TUBKeCC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDM0RDQ0FvS2dBd0lCQWdJVUtlcXlXcXFaVWlnOG9jRklmbTk2cjgvTC9YMHdDZ1lJS29aSXpqMEVBd0l3ClhqRUxNQWtHQTFVRUJoTUNSRVV4RERBS0JnTlZCQWdNQTA1U1Z6RVNNQkFHQTFVRUJ3d0pVR0ZrWlhKaWIzSnUKTVF3d0NnWURWUVFLREFOVlF6UXhEREFLQmdOVkJBc01BMVZETkRFUk1BOEdBMVVFQXd3SWNtTmhMVzl5WnpFdwpIaGNOTWpBeE1qRTFNVFkwTmpBd1doY05NakV4TWpFMU1UWTFNVEF3V2pCRk1ROHdEUVlEVlFRTEV3WmpiR2xsCmJuUXhNakF3QmdOVkJBTVRLV1p5YjI1MFpXNWtMWE5wWjI1cGJtY3RkR1Z6ZEdWeUxXbHVabTh0WVdSa1FXUnQKYVhOemFXOXVNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVJb3BmYzNHVmNxdCtHcVdmQ21SOApCZDVsY1ZRQXBOK25HOTVaK1FhZXRGNVJVRHllMnViZFB0V1VlT0s5TnFrSk1oVWJ5ZGtSTDVvL0RoRmFiYlZhCjY2T0NBVFV3Z2dFeE1BNEdBMVVkRHdFQi93UUVBd0lEcURBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVUzZTJLUzhodmRUM1FNSU1JQ0pRMwphK3htL1Nvd0h3WURWUjBqQkJnd0ZvQVVwU3JzY29PYzBTOWNrdHlhUE50elpZaEFkRVV3TkFZRFZSMFJCQzB3Cks0SXBabkp2Ym5SbGJtUXRjMmxuYm1sdVp5MTBaWE4wWlhJdGFXNW1ieTFoWkdSQlpHMXBjM05wYjI0d2ZBWUkKS2dNRUJRWUhDQUVFY0hzaVlYUjBjbk1pT25zaWFHWXVRV1ptYVd4cFlYUnBiMjRpT2lJaUxDSm9aaTVGYm5KdgpiR3h0Wlc1MFNVUWlPaUptY205dWRHVnVaQzF6YVdkdWFXNW5MWFJsYzNSbGNpMXBibVp2TFdGa1pFRmtiV2x6CmMybHZiaUlzSW1obUxsUjVjR1VpT2lKamJHbGxiblFpZlgwd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFNanMKck85dTI2MXpKdFYxTzl6TDFyUmNLMHhjVFpZMW9yMkZaWTU0NkNYNUFpQnZtSW5LN3lsR1dvU21hTldTdVovSwpxTUtISE81SHM1QXR0TGpLTlRUL2NBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSGI9/QOyOaL66/z6CIVh+vVeVHR5u0HA1IxLuMwrrMwrHCAqqCAoHb3JnMU1TUBKeCC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDM0RDQ0FvS2dBd0lCQWdJVUtlcXlXcXFaVWlnOG9jRklmbTk2cjgvTC9YMHdDZ1lJS29aSXpqMEVBd0l3ClhqRUxNQWtHQTFVRUJoTUNSRVV4RERBS0JnTlZCQWdNQTA1U1Z6RVNNQkFHQTFVRUJ3d0pVR0ZrWlhKaWIzSnUKTVF3d0NnWURWUVFLREFOVlF6UXhEREFLQmdOVkJBc01BMVZETkRFUk1BOEdBMVVFQXd3SWNtTmhMVzl5WnpFdwpIaGNOTWpBeE1qRTFNVFkwTmpBd1doY05NakV4TWpFMU1UWTFNVEF3V2pCRk1ROHdEUVlEVlFRTEV3WmpiR2xsCmJuUXhNakF3QmdOVkJBTVRLV1p5YjI1MFpXNWtMWE5wWjI1cGJtY3RkR1Z6ZEdWeUxXbHVabTh0WVdSa1FXUnQKYVhOemFXOXVNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVJb3BmYzNHVmNxdCtHcVdmQ21SOApCZDVsY1ZRQXBOK25HOTVaK1FhZXRGNVJVRHllMnViZFB0V1VlT0s5TnFrSk1oVWJ5ZGtSTDVvL0RoRmFiYlZhCjY2T0NBVFV3Z2dFeE1BNEdBMVVkRHdFQi93UUVBd0lEcURBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVUzZTJLUzhodmRUM1FNSU1JQ0pRMwphK3htL1Nvd0h3WURWUjBqQkJnd0ZvQVVwU3JzY29PYzBTOWNrdHlhUE50elpZaEFkRVV3TkFZRFZSMFJCQzB3Cks0SXBabkp2Ym5SbGJtUXRjMmxuYm1sdVp5MTBaWE4wWlhJdGFXNW1ieTFoWkdSQlpHMXBjM05wYjI0d2ZBWUkKS2dNRUJRWUhDQUVFY0hzaVlYUjBjbk1pT25zaWFHWXVRV1ptYVd4cFlYUnBiMjRpT2lJaUxDSm9aaTVGYm5KdgpiR3h0Wlc1MFNVUWlPaUptY205dWRHVnVaQzF6YVdkdWFXNW5MWFJsYzNSbGNpMXBibVp2TFdGa1pFRmtiV2x6CmMybHZiaUlzSW1obUxsUjVjR1VpT2lKamJHbGxiblFpZlgwd0NnWUlLb1pJemowRUF3SURTQUF3UlFJaEFNanMKck85dTI2MXpKdFYxTzl6TDFyUmNLMHhjVFpZMW9yMkZaWTU0NkNYNUFpQnZtSW5LN3lsR1dvU21hTldTdVovSwpxTUtISE81SHM1QXR0TGpLTlRUL2NBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSGI9/QOyOaL66/z6CIVh+vVeVHR5u0HA1IxKeKwrAAgq9Agq6AggBEggSBnVjNC1jYxqrAgofVUM0LkFwcHJvdmFsOmFwcHJvdmVUcmFuc2FjdGlvbgoNVUM0LkFkbWlzc2lvbgoMYWRkQWRtaXNzaW9uCuoBWyJ7XCJhZG1pc3Npb25JZFwiOlwiZnJvbnRlbmQtc2lnbmluZy10ZXN0ZXItaW5mby1hZGRBZG1pc3Npb246QzFcIixcImVucm9sbG1lbnRJZFwiOlwiZnJvbnRlbmQtc2lnbmluZy10ZXN0ZXItaW5mby1hZGRBZG1pc3Npb25cIixcImNvdXJzZUlkXCI6XCJDMVwiLFwibW9kdWxlSWRcIjpcIk1hdHJpY3VsYXRpb25UZXN0TW9kdWxlLjFcIixcInRpbWVzdGFtcFwiOlwiMjAyMC0xMi0zMVQyMzo1OTo1OVwifSJdEtgoCpwHCiBmcdFg9YpXaNouPDYQUEbFd3z+zIiCxi0arkA2esygdBL3BgqNBBI3CgpfbGlmZWN5Y2xlEikKJwohbmFtZXNwYWNlcy9maWVsZHMvdWM0LWNjL1NlcXVlbmNlEgIIAxLRAwoGdWM0LWNjEsYDCjsKNQBkcmFmdDoAc0RDNEhLWHRTUXZnUGxVeHN3MGRjSEJFS1JsbGw3bHFKaUtLWXg0b2RHRT0AEgIILRqGAwo1AGRyYWZ0OgBzREM0SEtYdFNRdmdQbFV4c3cwZGNIQkVLUmxsbDdscUppS0tZeDRvZEdFPQAazAJbeyJpZCI6Ing1MDk6OkNOXHUwMDNkdGVzdC1hZG1pbiwgT1VcdTAwM2RhZG1pbjo6Q05cdTAwM2RyY2Etb3JnMSwgT1VcdTAwM2RVQzQsIE9cdTAwM2RVQzQsIExcdTAwM2RQYWRlcmJvcm4sIFNUXHUwMDNkTlJXLCBDXHUwMDNkREUiLCJ0eXBlIjoiYWRtaW4ifSx7ImlkIjoieDUwOTo6Q05cdTAwM2Rmcm9udGVuZC1zaWduaW5nLXRlc3Rlci1pbmZvLWFkZEFkbWlzc2lvbiwgT1VcdTAwM2RjbGllbnQ6OkNOXHUwMDNkcmNhLW9yZzEsIE9VXHUwMDNkVUM0LCBPXHUwMDNkVUM0LCBMXHUwMDNkUGFkZXJib3JuLCBTVFx1MDAzZE5SVywgQ1x1MDAzZERFIiwidHlwZSI6ImNsaWVudCJ9XRrSAgjIARrMAlt7ImlkIjoieDUwOTo6Q05cdTAwM2R0ZXN0LWFkbWluLCBPVVx1MDAzZGFkbWluOjpDTlx1MDAzZHJjYS1vcmcxLCBPVVx1MDAzZFVDNCwgT1x1MDAzZFVDNCwgTFx1MDAzZFBhZGVyYm9ybiwgU1RcdTAwM2ROUlcsIENcdTAwM2RERSIsInR5cGUiOiJhZG1pbiJ9LHsiaWQiOiJ4NTA5OjpDTlx1MDAzZGZyb250ZW5kLXNpZ25pbmctdGVzdGVyLWluZm8tYWRkQWRtaXNzaW9uLCBPVVx1MDAzZGNsaWVudDo6Q05cdTAwM2RyY2Etb3JnMSwgT1VcdTAwM2RVQzQsIE9cdTAwM2RVQzQsIExcdTAwM2RQYWRlcmJvcm4sIFNUXHUwMDNkTlJXLCBDXHUwMDNkREUiLCJ0eXBlIjoiY2xpZW50In1dIhASBnVjNC1jYxoGMC4xNC4xEqkICt0HCgdvcmcxTVNQEtEHLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwVENDQWt5Z0F3SUJBZ0lVTVNsWEF3b1lxZ2I1VUh0REFhdU5qbUtzK0p3d0NnWUlLb1pJemowRUF3SXcKWGpFTE1Ba0dBMVVFQmhNQ1JFVXhEREFLQmdOVkJBZ01BMDVTVnpFU01CQUdBMVVFQnd3SlVHRmtaWEppYjNKdQpNUXd3Q2dZRFZRUUtEQU5WUXpReEREQUtCZ05WQkFzTUExVkROREVSTUE4R0ExVUVBd3dJY21OaExXOXlaekV3CkhoY05NakF4TWpFMU1UWXpOVEF3V2hjTk1qRXhNakUxTVRZME1EQXdXakJnTVFzd0NRWURWUVFHRXdKVlV6RVgKTUJVR0ExVUVDQk1PVG05eWRHZ2dRMkZ5YjJ4cGJtRXhGREFTQmdOVkJBb1RDMGg1Y0dWeWJHVmtaMlZ5TVEwdwpDd1lEVlFRTEV3UndaV1Z5TVJNd0VRWURWUVFERXdwd1pXVnlNUzF2Y21jeE1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUUrSUlPZUF5UkJKWThtZTdqRDRjS1hwWGkvaTlNVDNzcm1kdWxiOFZjcWxuZDZrSkgKL3BkWXhFSlZROWZVYm5ObCs4d3RJb2ptOHpLdjZiOTlSWlYxZmFPQjVUQ0I0akFPQmdOVkhROEJBZjhFQkFNQwpCNEF3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVLSmRBc2N4S0lsbTU3d0c1RmNMd3hMUUNMYUV3Ckh3WURWUjBqQkJnd0ZvQVVwU3JzY29PYzBTOWNrdHlhUE50elpZaEFkRVV3SlFZRFZSMFJCQjR3SElJYWNHVmwKY2pFdGIzSm5NUzFpTjJaa1pEYzJOV010Y1dKbWVqZ3dXd1lJS2dNRUJRWUhDQUVFVDNzaVlYUjBjbk1pT25zaQphR1l1UVdabWFXeHBZWFJwYjI0aU9pSWlMQ0pvWmk1RmJuSnZiR3h0Wlc1MFNVUWlPaUp3WldWeU1TMXZjbWN4Cklpd2lhR1l1Vkhsd1pTSTZJbkJsWlhJaWZYMHdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdGZzVqYXdnc2VxOUgKOVpZV1pabjlTLzJ1MkpPUjY0Y0VjL01zemRLb1h5WUNJRzhqTlVEelVnTjlXVEFhM3paTlhTL1hMeGdSTXJOQgpEK2VBQTlTUGxIbWMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSRzBFAiEA+LSDTXZ8mht8b1Gxhu6pEsQGDQscvuhMY/OOqFwPoA8CIEcPM/K+LZj4odCePSlyZbugx0SuFDd6WvmPN9AuI1cMEqwICuEHCgdvcmcyTVNQEtUHLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwekNDQWsyZ0F3SUJBZ0lVQ3ZUOVdQa0tseEF6enpLWGIvRThQNEl2Slk0d0NnWUlLb1pJemowRUF3SXcKWGpFTE1Ba0dBMVVFQmhNQ1JFVXhEREFLQmdOVkJBZ01BMDVTVnpFU01CQUdBMVVFQnd3SlVHRmtaWEppYjNKdQpNUXd3Q2dZRFZRUUtEQU5WUXpReEREQUtCZ05WQkFzTUExVkROREVSTUE4R0ExVUVBd3dJY21OaExXOXlaekl3CkhoY05NakF4TWpFMU1UWXpOVEF3V2hjTk1qRXhNakUxTVRZME1EQXdXakJnTVFzd0NRWURWUVFHRXdKVlV6RVgKTUJVR0ExVUVDQk1PVG05eWRHZ2dRMkZ5YjJ4cGJtRXhGREFTQmdOVkJBb1RDMGg1Y0dWeWJHVmtaMlZ5TVEwdwpDd1lEVlFRTEV3UndaV1Z5TVJNd0VRWURWUVFERXdwd1pXVnlNUzF2Y21jeU1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUVRcXoyWkNKSjZUazhpUWVWb3hlZU1ZR3ZkZm1EVmtvUkNlQjdXN291eFlkOXlwL1YKS0FQU2pRb1pqV3VzMWZMdnRjaXJsTEQ1bVQ4VDhZL01jQUxEa0tPQjVqQ0I0ekFPQmdOVkhROEJBZjhFQkFNQwpCNEF3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVDL2QxVmlBVGpETWx6QWZ5Zk9scVZhbUg4S3N3Ckh3WURWUjBqQkJnd0ZvQVVPYWxXQ2w4cEtaQjBURURCdFRsZU1vL3pTb1V3SmdZRFZSMFJCQjh3SFlJYmNHVmwKY2pFdGIzSm5NaTAyWW1JM05UZzNZalUyTFd0cWQzSnpNRnNHQ0NvREJBVUdCd2dCQkU5N0ltRjBkSEp6SWpwNwpJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVJam9pY0dWbGNqRXRiM0puCk1pSXNJbWhtTGxSNWNHVWlPaUp3WldWeUluMTlNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUNaV1JkNy9RRGMKN0FkZFQ4YjRJWXpmdEc2T1NBZHBzdmlvc0VUYm1CYjlrUUlnS2ZTcmxBVEhxSS9tWmp4Vkc2aEZyUTFaQ0xESQpYaEFRUkdrektPK3VTSHM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEkYwRAIgenyIB2AqZ1ZZbyv2U/NgzfviY89HKT5t5SkyOJy+zLgCIF1Jk74SN/n7PMHxAbTLRmMDjH7YAtR/6ehNS1trO2yKEqwICuEHCgdvcmcxTVNQEtUHLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwakNDQWsyZ0F3SUJBZ0lVSVRZdWlqRnBhUXE1eGx0Y0F5TDBoc2J2Y21Vd0NnWUlLb1pJemowRUF3SXcKWGpFTE1Ba0dBMVVFQmhNQ1JFVXhEREFLQmdOVkJBZ01BMDVTVnpFU01CQUdBMVVFQnd3SlVHRmtaWEppYjNKdQpNUXd3Q2dZRFZRUUtEQU5WUXpReEREQUtCZ05WQkFzTUExVkROREVSTUE4R0ExVUVBd3dJY21OaExXOXlaekV3CkhoY05NakF4TWpFMU1UWXpOVEF3V2hjTk1qRXhNakUxTVRZME1EQXdXakJnTVFzd0NRWURWUVFHRXdKVlV6RVgKTUJVR0ExVUVDQk1PVG05eWRHZ2dRMkZ5YjJ4cGJtRXhGREFTQmdOVkJBb1RDMGg1Y0dWeWJHVmtaMlZ5TVEwdwpDd1lEVlFRTEV3UndaV1Z5TVJNd0VRWURWUVFERXdwd1pXVnlNaTF2Y21jeE1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUViTzZaWnd2Qkw4bG84WjBiVURyb05iVVh0T3dib1JpdU5kTUtRZmsvZko3R0VsNFMKczdPTmZZOEF6NWlES0VSeko5K0J1SmVqc2trL3dBcVlueUpWQktPQjVqQ0I0ekFPQmdOVkhROEJBZjhFQkFNQwpCNEF3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVVT0Q1TlFTZ3h0M3Vldkh0bVdaT1hoRmhheGt3Ckh3WURWUjBqQkJnd0ZvQVVwU3JzY29PYzBTOWNrdHlhUE50elpZaEFkRVV3SmdZRFZSMFJCQjh3SFlJYmNHVmwKY2pJdGIzSm5NUzA0TkdKa1kyWTBOelEyTFdJMWNXcHNNRnNHQ0NvREJBVUdCd2dCQkU5N0ltRjBkSEp6SWpwNwpJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVJam9pY0dWbGNqSXRiM0puCk1TSXNJbWhtTGxSNWNHVWlPaUp3WldWeUluMTlNQW9HQ0NxR1NNNDlCQU1DQTBjQU1FUUNJR1RmSXRSdXJsZWkKMzZUY3MwTGI1ekIrcnQ4cUZNUkdZRXA0QXVuWm8waTRBaUFldUgrbllLdDZVVjM3L0xvL01FaGs3VGtROG0yRgpqV0lSM1NteXp2Z1BGdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEkYwRAIgQ5shtkKcBbYyCEImbDDnSUuTBc5wEa65L17lX6EXQNcCIHV4XsdiogyR9fIgtKOLGmqAry3mke3wrRlHubRlAePDEqwICuEHCgdvcmcyTVNQEtUHLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwakNDQWsyZ0F3SUJBZ0lVR1l2RGhmcUhHT1RPN0FSdUJFbC9uQlAyUzc0d0NnWUlLb1pJemowRUF3SXcKWGpFTE1Ba0dBMVVFQmhNQ1JFVXhEREFLQmdOVkJBZ01BMDVTVnpFU01CQUdBMVVFQnd3SlVHRmtaWEppYjNKdQpNUXd3Q2dZRFZRUUtEQU5WUXpReEREQUtCZ05WQkFzTUExVkROREVSTUE4R0ExVUVBd3dJY21OaExXOXlaekl3CkhoY05NakF4TWpFMU1UWXpOVEF3V2hjTk1qRXhNakUxTVRZME1EQXdXakJnTVFzd0NRWURWUVFHRXdKVlV6RVgKTUJVR0ExVUVDQk1PVG05eWRHZ2dRMkZ5YjJ4cGJtRXhGREFTQmdOVkJBb1RDMGg1Y0dWeWJHVmtaMlZ5TVEwdwpDd1lEVlFRTEV3UndaV1Z5TVJNd0VRWURWUVFERXdwd1pXVnlNaTF2Y21jeU1Ga3dFd1lIS29aSXpqMENBUVlJCktvWkl6ajBEQVFjRFFnQUUzckE5bnkwM0tYa1ZzNlk1NCtrTU56eElTaWI2UWltTVBFc1FTZVg0MzZIa1N2OGwKenE0Rk1LeXN0a3lvUi9YTHN2TWpRRjU1Q1lKbG1uaVEwcUw5cDZPQjVqQ0I0ekFPQmdOVkhROEJBZjhFQkFNQwpCNEF3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVVmWVlmMytvbTMvUE1ROVJLUkNxV3NpRlBPS2d3Ckh3WURWUjBqQkJnd0ZvQVVPYWxXQ2w4cEtaQjBURURCdFRsZU1vL3pTb1V3SmdZRFZSMFJCQjh3SFlJYmNHVmwKY2pJdGIzSm5NaTAxTkRkak4ySmlZelUzTFdSbmJuTm1NRnNHQ0NvREJBVUdCd2dCQkU5N0ltRjBkSEp6SWpwNwpJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVJam9pY0dWbGNqSXRiM0puCk1pSXNJbWhtTGxSNWNHVWlPaUp3WldWeUluMTlNQW9HQ0NxR1NNNDlCQU1DQTBjQU1FUUNJSE1oVnV3WWhkMUwKTnhQSUcvaFlrcE1PeVZ1WWx0ZFc4eTRRR1J5TFl0by9BaUJ2N3JFbkF4dHVMNGpQQ2VaTUFFMzhSaUlmc1RsMwo0TjBZRTY5QzY1WWJndz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEkYwRAIgcRH9lDJYneHhtZPd+GNrQKcJA7iISVI9IzI4iiZ3AU0CIHctoWJB0HcvkSh8NyBhcTZMqeGqSbWaxEuqo891mvz5";

        const transaction = await decodeTransaction(transactionB64, protoURL);

        if (!transaction) fail("Could not decode course admission transaction");

        const enrollmentId = "frontend-signing-tester-info-addAdmission";
        const courseAddAdmission: CourseAdmission = {
            admissionId: "frontend-signing-tester-info-addAdmission:C1",
            courseId: "C1",
            enrollmentId: "frontend-signing-tester-info-addAdmission",
            moduleId: "MatriculationTestModule.1",
            timestamp: "2020-12-31T23:59:59",
        };

        expect(admissionsTransactionValidator(transaction, undefined, courseAddAdmission, enrollmentId)).toBe(true);

        const tmp = courseAddAdmission.courseId;

        courseAddAdmission.courseId = "some course id";

        expect(admissionsTransactionValidator(transaction, undefined, courseAddAdmission, enrollmentId)).toBe(false);

        courseAddAdmission.courseId = tmp;

        expect(admissionsTransactionValidator(transaction, undefined, courseAddAdmission, enrollmentId)).toBe(true);

        transaction.data.actions.push(transaction.data.actions[0]);

        expect(admissionsTransactionValidator(transaction, undefined, courseAddAdmission, enrollmentId)).toBe(false);

        // TODO add invalid peer signature in the future, when we can actually verify it
    });

    test("Test rejection transaction validation", async () => {
        const base64Transaction =
            "";

        const transaction = await decodeTransaction(base64Transaction, protoURL);

        if (!transaction) fail("Could not decode transaction");

        let operationId = "8khbu5IcjoVkZxbzqX2B99b30M1hR0M8Fm_aMKz0Exo=";
        const rejectionReason = "ExampleRejectMessage";

        expect(rejectionTransactionValidator(transaction, operationId, rejectionReason)).toBe(true);

        operationId = "someOther";

        expect(rejectionTransactionValidator(transaction, operationId, rejectionReason)).toBe(false);

        transaction.data.actions.push(transaction.data.actions[0]);

        expect(rejectionTransactionValidator(transaction, operationId, rejectionReason)).toBe(false);
    });
});
