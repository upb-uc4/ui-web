import { pemStringToPrivateKey, pemStringToPublicKey } from "@/use/crypto/certificates";
import { signProtobuf, verifyProtobufSignature } from "@/use/crypto/signing";

describe("Proposal Signing Tests", () => {
    const base64Proposal =
        "CpYJCmsIAxABGgwIs/S6/AUQwNHzlwIiCW15Y2hhbm5lbCpAMGUyMzA4ZDU5OGM4YTg1MGI0ZTM5Mzk1OTA4NGRlY2ZmNDRjMmMwMmIwZWI3MmI3ZmJiNmVmNDdiOTMzZmRmOToKEggSBnVjNC1jYxKmCAqJCAoHb3JnMU1TUBL9By0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDeGpDQ0FtMmdBd0lCQWdJVUdKRnJ6TXh5T0FkbkpFcmZyK1VmRHJMREpiNHdDZ1lJS29aSXpqMEVBd0l3CllERUxNQWtHQTFVRUJoTUNWVk14RnpBVkJnTlZCQWdURGs1dmNuUm9JRU5oY205c2FXNWhNUlF3RWdZRFZRUUsKRXd0SWVYQmxjbXhsWkdkbGNqRVBNQTBHQTFVRUN4TUdSbUZpY21sak1SRXdEd1lEVlFRREV3aHlZMkV0YjNKbgpNVEFlRncweU1ERXdNakF4TURFek1EQmFGdzB5TVRFd01qQXhNREU0TURCYU1EZ3hEakFNQmdOVkJBc1RCV0ZrCmJXbHVNU1l3SkFZRFZRUURFeDF6WTJGc1lTMXlaV2RwYzNSeVlYUnBiMjR0WVdSdGFXNHRiM0puTVRCWk1CTUcKQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJMU3R4dWloaHliMlhVMHd6TWhWM1N1MkRyN0xVSTR6L0llTAp6ZVVEemhjcW5aeExETjV3NDNyVjBGWHU0eVJxMGtyT2F4UmhwQVk2NWRtUVE2UFJyenVqZ2dFck1JSUJKekFPCkJnTlZIUThCQWY4RUJBTUNBNmd3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0cKQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZMQWE5OXZPWGhKeWxjaCtNUUd0aEZDRy92K1JNQjhHQTFVZApJd1FZTUJhQUZCSjd6M2hTMU5VNEhwRWFGZ3lXS2lyNjk5czVNQ2dHQTFVZEVRUWhNQitDSFhOallXeGhMWEpsCloybHpkSEpoZEdsdmJpMWhaRzFwYmkxdmNtY3hNSDRHQ0NvREJBVUdCd2dCQkhKN0ltRjBkSEp6SWpwN0ltRmsKYldsdUlqb2lkSEoxWlNJc0ltaG1Ma0ZtWm1sc2FXRjBhVzl1SWpvaUlpd2lhR1l1Ulc1eWIyeHNiV1Z1ZEVsRQpJam9pYzJOaGJHRXRjbVZuYVhOMGNtRjBhVzl1TFdGa2JXbHVMVzl5WnpFaUxDSm9aaTVVZVhCbElqb2lZV1J0CmFXNGlmWDB3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnRWpXZjdiUXlHa0hmMmJqMTZNeVE4NzR3Q1dPYjhsMk0KNjBNbEo0ZURnb3NDSUViRDQrc3ROcVpLS3NKK0M0OEllcnBPSkQzandrTEcrOHk3WXV4VHB4OFoKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSGDFgEXYYosB1qlK1KtlA9/HFkbExh4YMQRLLCArICArFCAgBEggSBnVjNC1jYxq2CAoeVUM0LkNlcnRpZmljYXRlOmFkZENlcnRpZmljYXRlCgMxMDEKjggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS1cbk1JSUN4akNDQW0yZ0F3SUJBZ0lVR0pGcnpNeHlPQWRuSkVyZnIrVWZEckxESmI0d0NnWUlLb1pJemowRUF3SXdcbllERUxNQWtHQTFVRUJoTUNWVk14RnpBVkJnTlZCQWdURGs1dmNuUm9JRU5oY205c2FXNWhNUlF3RWdZRFZRUUtcbkV3dEllWEJsY214bFpHZGxjakVQTUEwR0ExVUVDeE1HUm1GaWNtbGpNUkV3RHdZRFZRUURFd2h5WTJFdGIzSm5cbk1UQWVGdzB5TURFd01qQXhNREV6TURCYUZ3MHlNVEV3TWpBeE1ERTRNREJhTURneERqQU1CZ05WQkFzVEJXRmtcbmJXbHVNU1l3SkFZRFZRUURFeDF6WTJGc1lTMXlaV2RwYzNSeVlYUnBiMjR0WVdSdGFXNHRiM0puTVRCWk1CTUdcbkJ5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTFN0eHVpaGh5YjJYVTB3ek1oVjNTdTJEcjdMVUk0ei9JZUxcbnplVUR6aGNxblp4TERONXc0M3JWMEZYdTR5UnEwa3JPYXhSaHBBWTY1ZG1RUTZQUnJ6dWpnZ0VyTUlJQkp6QU9cbkJnTlZIUThCQWY4RUJBTUNBNmd3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01Bd0dcbkExVWRFd0VCL3dRQ01BQXdIUVlEVlIwT0JCWUVGTEFhOTl2T1hoSnlsY2grTVFHdGhGQ0cvditSTUI4R0ExVWRcbkl3UVlNQmFBRkJKN3ozaFMxTlU0SHBFYUZneVdLaXI2OTlzNU1DZ0dBMVVkRVFRaE1CK0NIWE5qWVd4aExYSmxcbloybHpkSEpoZEdsdmJpMWhaRzFwYmkxdmNtY3hNSDRHQ0NvREJBVUdCd2dCQkhKN0ltRjBkSEp6SWpwN0ltRmtcbmJXbHVJam9pZEhKMVpTSXNJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVcbklqb2ljMk5oYkdFdGNtVm5hWE4wY21GMGFXOXVMV0ZrYldsdUxXOXlaekVpTENKb1ppNVVlWEJsSWpvaVlXUnRcbmFXNGlmWDB3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnRWpXZjdiUXlHa0hmMmJqMTZNeVE4NzR3Q1dPYjhsMk1cbjYwTWxKNGVEZ29zQ0lFYkQ0K3N0TnFaS0tzSitDNDhJZXJwT0pEM2p3a0xHKzh5N1l1eFRweDhaXG4tLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tXG4=";
    const base64GoodSignature = "MEUCIQD92OsJsVVFqFfifMV14ROiL5Ni/RaOBkR0DqzetvPfkQIgcrgu9vxr5TuZY6lft5adCETaC3CSE8QA+bs9MheeLcI=";
    const base64BadSignature = "MEUCIQD92OsJsVVFqFfifMV14ROiL5Ni/RaOBkR0DqzetvPfkQIgcrgu9vdr5TuZY6lft5adCETaC3CSE8QA+bs9MheeLcI=";
    const privateKeyPem =
        "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQg+Mg4a86fIXz8PCoL\n1aCesiidCh/GmeoWCjy0mqM9PL2gCgYIKoZIzj0DAQehRANCAAS0rcbooYcm9l1N\nMMzIVd0rtg6+y1COM/yHi83lA84XKp2cSwzecON61dBV7uMkatJKzmsUYaQGOuXZ\nkEOj0a87\n-----END PRIVATE KEY-----\n";
    const publicKeyPem =
        "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEtK3G6KGHJvZdTTDMyFXdK7YOvstQ\njjP8h4vN5QPOFyqdnEsM3nDjetXQVe7jJGrSSs5rFGGkBjrl2ZBDo9GvOw==\n-----END PUBLIC KEY-----";

    let privateKey: CryptoKey;
    let publicKey: CryptoKey;

    beforeAll(async () => {
        privateKey = await pemStringToPrivateKey(privateKeyPem);
        publicKey = await pemStringToPublicKey(publicKeyPem);
    });

    test("Proposal signing", async () => {
        const signature = await signProtobuf(base64Proposal, privateKey);

        const ownSignatureVerification = await verifyProtobufSignature(base64Proposal, signature, publicKey);
        expect(ownSignatureVerification).toBe(true);

        const goodSignatureVerification = await verifyProtobufSignature(base64Proposal, base64GoodSignature, publicKey);
        expect(goodSignatureVerification).toBe(true);

        const badSignatureVerification = await verifyProtobufSignature(base64Proposal, base64BadSignature, publicKey);
        expect(badSignatureVerification).toBe(false);
    });
});
