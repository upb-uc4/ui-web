import TransactionMessage from "@/api/api_models/common/Transaction";
import UnsignedProposalMessage from "@/api/api_models/common/UnsignedProposalMessage";
import { TransactionInfo } from "@/api/api_models/operation_management/Operation";
import AbstractTransaction from "@/api/contracts/AbstractTransaction";
import { decodeTransaction } from "@/api/helpers/TransactionDecoding";
import { base64ToArrayBuffer, getPublicKeyFromCertificate, pemStringToPrivateKey, pemStringToPublicKey } from "@/use/crypto/certificates";
import { signProtobuf, verifyProposalResponsePayloadSignature, verifyProtobufSignature } from "@/use/crypto/signing";

describe("Transaction Signing Tests", () => {
    const privateKeyPem =
        "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgjSxULr+PUQtz22nk\n7Xv9kO4m8dT2qf1WgDcn6z5+E2qgCgYIKoZIzj0DAQehRANCAARJFI1Srj+IloyE\n5sw59Z9qs9ETZhidJZAr0I0NxLHlE3zsf8wAdK4A1oa3hSjEkSsDypNXjkeGokcb\nFdKCMFoD\n-----END PRIVATE KEY-----\n";
    const certificate =
        "-----BEGIN CERTIFICATE-----\nMIICZzCCAg6gAwIBAgIUFYQhngIphWlQ8NlRenYivaajGz4wCgYIKoZIzj0EAwIw\nXjELMAkGA1UEBhMCREUxDDAKBgNVBAgMA05SVzESMBAGA1UEBwwJUGFkZXJib3Ju\nMQwwCgYDVQQKDANVQzQxDDAKBgNVBAsMA1VDNDERMA8GA1UEAwwIcmNhLW9yZzEw\nHhcNMjAxMjAxMDkyODAwWhcNMjExMjAxMDkzMzAwWjAfMQ8wDQYDVQQLEwZjbGll\nbnQxDDAKBgNVBAMTAzEwMTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABEkUjVKu\nP4iWjITmzDn1n2qz0RNmGJ0lkCvQjQ3EseUTfOx/zAB0rgDWhreFKMSRKwPKk1eO\nR4aiRxsV0oIwWgOjgegwgeUwDgYDVR0PAQH/BAQDAgOoMB0GA1UdJQQWMBQGCCsG\nAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBTV2tpCoXs1\n9iV2TSfqI/pQ2YJsQTAfBgNVHSMEGDAWgBSIXgNRxI/Arcrcpm+T/6q4Cqa9NDAO\nBgNVHREEBzAFggMxMDEwVgYIKgMEBQYHCAEESnsiYXR0cnMiOnsiaGYuQWZmaWxp\nYXRpb24iOiIiLCJoZi5FbnJvbGxtZW50SUQiOiIxMDEiLCJoZi5UeXBlIjoiY2xp\nZW50In19MAoGCCqGSM49BAMCA0cAMEQCIGew41nSkA3+6HJKZomIssB+KE7p4czs\n2cVsfrBK3SaIAiB4qQxWy+c5Vfmdh/wqS1nI9MvmX3d1Ne2pevS3QNSwhQ==\n-----END CERTIFICATE-----\n";
    const trans =
        "";
    const protoURL = "public/hlf-proto.json";
    let privateKey: CryptoKey;
    let publicKey: CryptoKey;

    beforeAll(async () => {
        privateKey = await pemStringToPrivateKey(privateKeyPem);
        publicKey = await getPublicKeyFromCertificate(certificate);
    });

    test.skip("Transaction signing", async () => {
        const signature = await signProtobuf(trans, privateKey);

        const ownSignatureVerification = await verifyProtobufSignature(trans, signature, publicKey);
        expect(ownSignatureVerification).toBe(true);

        // as the signature algorithm is exactly the same as in proposal signing, we can omit testing "bad" signatures here.
        // the only interesting part is the extraction of the public key, which will be used
    });

    test("Verify peer signature", async () => {
        const transaction = await decodeTransaction(trans, protoURL);
        if (!transaction) fail();

        expect(await new MockTransaction().validateTransaction(transaction)).toEqual(true);
        transaction.data.actions[0].payload.action.endorsements[0].signature =
            "aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kUXc0dzlXZ1hjUQ==";
        expect(await new MockTransaction().validateTransaction(transaction)).toEqual(false);
    });

    class MockTransaction extends AbstractTransaction {
        public getProposal(): Promise<UnsignedProposalMessage> {
            throw new Error("Method not implemented.");
        }
        public buildTransactionInfo(...params: any): TransactionInfo {
            throw new Error("Method not implemented.");
        }
        public async validateTransaction(transaction: TransactionMessage) {
            return this.verifyPeerSignatures(transaction);
        }
    }
});
